{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c2a93126.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst Header = ({titulo}) => {\r\n    return (  \r\n        <nav>\r\n            <div className=\"nav\">\r\n            \r\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nHeader.propTypes ={\r\n    titulo: PropTypes.string.isRequired\r\n} \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"red lighten-2 error\"> {mensaje}</p> \r\n        \r\n     );\r\n}\r\nError.propTypes ={\r\n    mensaje: PropTypes.string.isRequired\r\n} \r\nexport default Error;\r\n","import React,{useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\nconst Formulario = ({busqueda,guardarBusqueda,guardarConsultar}) => {\r\n\r\n    \r\n    const [error,guardarError] = useState(false);\r\n\r\n    const{ciudad,pais} = busqueda;\r\n\r\n\r\n    const handleChange = e => {\r\n\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n      \r\n        if(ciudad.trim() === '' || pais.trim() === ''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n        guardarConsultar(true);\r\n        \r\n\r\n    }\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error? <Error mensaje=\"Campos obligatorios\" />: null }\r\n            <div className=\"input-field cold s12\">\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"ciudad\"\r\n                    value={ciudad}\r\n                    id=\"ciudad\"\r\n                    onChange={handleChange}\r\n                />\r\n              <label htmlFor=\"ciudad\"><h6>Ciudad:</h6></label>\r\n            </div>\r\n            <div className=\"input-field cold s20\">\r\n                <select \r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">↓ Introduce pais ↓</option>    \r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>                \r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"PAN\">Panamá</option>\r\n                    <option value=\"BRA\">Brasíl</option>\r\n                    <option value=\"ECU\">Ecuador</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"BOL\">Bolivia</option>\r\n                    <option value=\"GUA\">Guatemala</option>\r\n                    <option value=\"HON\">Honduras</option>\r\n                    <option value=\"CUB\">Cuba</option>\r\n                    <option value=\"JAM\">Jamaica</option>\r\n                    <option value=\"PR\">Puerto Rico</option>\r\n                    <option value=\"CHI\">China</option>\r\n\r\n\r\n                </select>\r\n                <label htmlFor=\"pais\"><h6>Pais:</h6> </label>\r\n            </div>\r\n            <div className=\"row col-md-6 mt-3 mb-3\"> \r\n                    <button  \r\n                        type=\"submit\"\r\n                        className=\"btn btn-success\"\r\n                        >Obtener clima</button>\r\n            </div>\r\n\r\n        </form>\r\n     );\r\n}\r\nFormulario.propTypes ={\r\n    busqueda: PropTypes.object.isRequired,\r\n    guardarBusqueda: PropTypes.func.isRequired,\r\n    guardarConsultar: PropTypes.func.isRequired\r\n} \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Clima = ({resultado}) => {\r\n\r\n    const {name, main } = resultado;\r\n    if(!name) return null; \r\n    const kelvin = 273.15;\r\n    return ( \r\n        <div className= \"card black col s12\">\r\n            <div className=\"black-text\">\r\n                <h2>El Clima de {name} es:</h2>\r\n                <p className=\"temperatura\">\r\n                   {parseFloat(main.temp - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n                </p>\r\n                <p > Temperatura Máxima: \r\n                   {parseFloat(main.temp_max - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n                </p>\r\n                <p >Temperatura Minima: \r\n                   {parseFloat(main.temp_min - kelvin, 10).toFixed(2)} <span>&#x2103;</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\nClima.propTypes ={\r\n    resultado: PropTypes.object.isRequired\r\n} \r\nexport default Clima;","import React,{Fragment,useState,useEffect} from 'react';\r\nimport Header from './components/Header';\r\nimport Formulario from './components/Formulario';\r\nimport Clima from './components/Clima';\r\nimport Error from './components/Error';\r\nfunction App() {\r\n\r\n\r\n  const [busqueda, guardarBusqueda]= useState({\r\n    ciudad:'',\r\n    pais:''\r\n});\r\nconst [consultar, guardarConsultar] = useState(false);\r\nconst [resultado, guardarResultado] = useState({});\r\nconst [error,guardarError] = useState(false);\r\nconst {ciudad, pais} = busqueda;\r\nuseEffect( () => {\r\nconst consultarAPI = async () => {\r\n  if(consultar){\r\n  const appId= '00ab64c9edffe55eb539b353389d0eec';\r\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\r\n  \r\n  const respuesta = await fetch(url);\r\n  const resultado = await respuesta.json();\r\n  guardarResultado(resultado);\r\n  guardarConsultar(false);\r\n  \r\n  if(resultado.cod === \"404\")\r\n  {\r\n    guardarError(true);\r\n    } else {\r\n    guardarError(false);\r\n  }\r\n}}\r\nconsultarAPI();\r\n\r\n\r\n\r\n},[consultar]);\r\nlet componente;\r\nif(error) {\r\n  componente= <Error mensaje=\"Sin resultados\" />\r\n} else {\r\n  componente= <Clima resultado={resultado} />\r\n}\r\n  return (\r\n    <Fragment>\r\n      <Header \r\n        titulo = 'Clima ☼'\r\n      />\r\n\r\n      <div className= \"contenedor-form\">\r\n       <div className=\"container\">\r\n         <div className=\"row\">\r\n           <div className=\"col m6 s12\">\r\n             <Formulario\r\n             busqueda= {busqueda}\r\n             guardarBusqueda= {guardarBusqueda}\r\n             guardarConsultar = {guardarConsultar}\r\n             />\r\n           </div>\r\n           <div className=\"comp\">\r\n             {componente}\r\n           </div>\r\n         </div>\r\n       </div>\r\n      </div>\r\n    </Fragment>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}